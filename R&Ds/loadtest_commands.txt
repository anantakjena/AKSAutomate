az container create -g aks-workshop-rg -n loadtest --image=azch/loadtest --restart-policy=Never -e SERVICE_ENDPOINT=http://52.152.201.28
az container logs -g aks-workshop-rg -n loadtest
az container delete -g aks-workshop-rg -n loadtest
az container show -n loadtest -g aks-workshop-rg

docker pull azch/frontend
docker pull azch/captureorder
helm install orders-mongo stable/mongodb --set mongodbUsername=orders-user,mongodbPassword=orders-password,mongodbDatabase=akschallenge

k create secret docker-registry aks-workshop-secret --docker-server=akswkshpacr.azurecr.io --docker-username=e9ab3ce3-ed75-4034-96c6-16a7b2d01e57 --docker-password=c29a9559-064f-4786-ab2c-c98c7eb3007b -n aks-workshop-dev
k create secret generic aks-workshop-mongo-secret --from-literal=mongohost=orders-mongo-mongodb.default.svc.cluster.local --from-literal=mongouser=orders-user --from-literal=mongopassword=orders-password -n aks-workshop-dev

curl  http://52.186.163.138/v1/order
curl -d '{"EmailAddress": "email@domain.com", "Product": "prod-1", "Total": 100}' -H "Content-Type: application/json" -X POST http://52.186.163.138/v1/order/

curl -kL https://aksfrontend.eastus.cloudapp.azure.com

az aks get-credentials --resource-group aks-workshop-rg --name aks-workshop-cluster --admin

az aks nodepool update --cluster-name aks-workshop-cluster --resource-group aks-workshop-rg --enable-cluster-autoscaler --min-count 1 --max-count 50 --name akswkpool

helm install prometheus stable/prometheus
helm install grafana stable/grafana

// ububtu agent
 ssh devops-vm-ub1804@13.82.57.99

// Ubuntu Self hoste agent config
https://vstsagentpackage.azureedge.net/agent/2.166.3/vsts-agent-linux-x64-2.166.3.tar.gz
curl https://vstsagentpackage.azureedge.net/agent/2.166.3/vsts-agent-linux-x64-2.166.3.tar.gz --output vsts-agent-linux-x64-2.166.3.tar.gz
tar -xvf vsts-agent-linux-x64-2.166.3.tar.gz -C ../devops-agent/

// PAT
5jilv4sb5gl4ht3exkb3xsc4v7wmmzdynbjc7vvlg66uj6on5fha

https://dev.azure.com/modatta

// docker 
sudo snap install docker

// azure-cli
curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
sudo apt-get install -y powershell
Install-Module -Name Az -AllowClobber

// kubectl
sudo apt-get update && sudo apt-get install -y apt-transport-https gnupg2
curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
echo "deb https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee -a /etc/apt/sources.list.d/kubernetes.list
sudo apt-get update
sudo apt-get install -y kubectl

// helm
sudo snap install helm (brew for mac)
helm repo add stable https://kubernetes-charts.storage.googleapis.com/


// AGIC
kubectl create -f https://raw.githubusercontent.com/Azure/aad-pod-identity/master/deploy/infra/deployment-rbac.yaml
helm repo add application-gateway-kubernetes-ingress https://appgwingress.blob.core.windows.net/ingress-azure-helm-package/
helm repo update
wget https://raw.githubusercontent.com/Azure/application-gateway-kubernetes-ingress/master/docs/examples/sample-helm-config.yaml -O helm-config.yaml
/*this will be part of the repo*/

helm install <install_name>> application-gateway-kubernetes-ingress/ingress-azure `
     --namespace <namespace> `
     --debug `
     --set appgw.name=<appgw-name> `
     --set appgw.resourceGroup=<resourceGroup> `
     --set appgw.subscriptionId=<subscriptionId> `
     --set appgw.usePrivateIP=false `
     --set appgw.shared=false `
     --set armAuth.type=servicePrincipal `
     --set armAuth.secretJSON=$(az ad sp create-for-rbac --sdk-auth | base64) `
     --set rbac.enabled=true `
     --set verbosityLevel=3 `
     --set kubernetes.watchNamespace=default

helm install aks-appgw-ingress -f ./Common/helm-config.yaml application-gateway-kubernetes-ingress/ingress-azure

// Uninstall AGIC
k delete -f https://raw.githubusercontent.com/Azure/aad-pod-identity/master/deploy/infra/deployment-rbac.yaml
helm delete aks-appgw-ingress -n aks-appgw-ingress-ns 

// NOT uSed finally for AGIC - **

$aadPodIdInstallCommand = "kubectl create -f https://raw.githubusercontent.com/Azure/aad-pod-identity/master/deploy/infra/deployment-rbac.yaml"
$helmRepoAddCommand = "helm repo add application-gateway-kubernetes-ingress https://appgwingress.blob.core.windows.net/ingress-azure-helm-package/"
$helmRepoUpdateCommand = "helm repo update"
$spCreateCommand = "az ad sp create-for-rbac --sdk-auth | base64 > sp.txt"
$spContentsCommand = "Get-Content sp.txt"
$appgwIngressRepoName = "application-gateway-kubernetes-ingress/ingress-azure"


# Prepare AGIC installer command
Invoke-Expression -Command $aadPodIdInstallCommand
Invoke-Expression -Command $helmRepoAddCommand
Invoke-Expression -Command $helmRepoUpdateCommand

# Install AGIC command
Invoke-Expression -Command $spCreateCommand
$spContent = Invoke-Expression -Command $spContentsCommand
helm install $ingControllerName $appgwIngressRepoName `
    --namespace $ingControllerNSName `
    --set appgw.name=$appgwName `
    --set appgw.resourceGroup=$resourceGroup `
    --set appgw.subscriptionId=$subscriptionId `
    --set appgw.usePrivateIP=false `
    --set appgw.shared=false `
    --set armAuth.type=servicePrincipal `
    --set armAuth.secretJSON=$spContent `
    --set rbac.enabled=true `
    --set verbosityLevel=3

// NOT uSed finally for AGIC - **

 
resourceGroup: aks-workshop-rg
clusterName: aks-workshop-cluster
acrName: akswkshpacr
keyVaultName: aks-workshop-kv
appgwName: aks-workshop-appgw
aksVNetName: aks-workshop-vnet
appgwSubnetName: aks-workshop-appgw-subnet
dockerSecretName: aks-workshop-secret
ingControllerName: aks-appgw-ingress
ingControllerNSName: aks-appgw-ingress-ns
appgwTemplateFileName: aksauto-appgw-deploy
subscriptionId: 6bdcc705-8db6-4029-953a-e749070e6db6
baseFolderPath: /Users/monojitdattams/Development/Projects/Workshops/AKSAutomate/Deployments