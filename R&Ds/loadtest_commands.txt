az container create -g aks-workshop-rg -n loadtest --image=azch/loadtest --restart-policy=Never -e SERVICE_ENDPOINT=http://52.152.201.28
az container logs -g aks-workshop-rg -n loadtest
az container delete -g aks-workshop-rg -n loadtest
az container show -n loadtest -g aks-workshop-rg


aadAppServerSecret: DaJKOynl6pr2Zv_wexc6iD~~~3KcSy6~7~

docker pull azch/frontend
docker pull azch/captureorder

helm repo add bitnami https://charts.bitnami.com/bitnami
helm search repo bitnami
helm install orders-mongo bitnami/mongodb --set mongodbUsername=orders-user,mongodbPassword=orders-password,mongodbDatabase=akschallenge

k create secret docker-registry aks-workshop-secret --docker-server=akswkshpacr.azurecr.io --docker-username=d02c0b0c-11ae-4289-95e8-4b5410340ab7 --docker-password=09dbef2e-1035-4f17-af27-cba30d4234d4 -n aks-workshop-dev
k create secret generic aks-workshop-mongo-secret --from-literal=mongohost=orders-mongo-mongodb.default.svc.cluster.local --from-literal=mongouser=orders-user --from-literal=mongopassword=orders-password -n aks-workshop-dev
docker login akswkshpacr.azurecr.io -u 8e023190-5486-4c68-ad5d-178067c53031 -p 48e5dbf3-823e-412a-88c3-edd86ad9e3ea

curl  http://52.224.18.69/v1/order
curl -d '{"EmailAddress": "email@domain.com", "Product": "prod-1", "Total": 100}' -H "Content-Type: application/json" -X POST http://52.224.18.69/v1/order/

curl -kL aksfrontend.eastus.cloudapp.azure.com/fe

az aks get-credentials --resource-group aks-workshop-rg --name aks-workshop-cluster --admin

az aks nodepool update --cluster-name aks-workshop-cluster --resource-group aks-workshop-rg --enable-cluster-autoscaler --min-count 1 --max-count 50 --name akswkpool

helm install prometheus stable/prometheus
helm install grafana stable/grafana



// ububtu agent
 ssh devops-vm-ubuntu1804@52.255.147.91

// Ubuntu Self hosted agent config
curl https://vstsagentpackage.azureedge.net/agent/2.166.3/vsts-agent-linux-x64-2.166.3.tar.gz --output vsts-agent-linux-x64-2.166.3.tar.gz
tar -xvf vsts-agent-linux-x64-2.166.3.tar.gz -C ../devops-agent/

// PAT
dn6ui3sqmr6larlf3f7adslholheoatpfa2jnnxktffe5oo5ddxa - linux
ss7ogpwwoigy7w2n2dmiwlr5cxelzomtwsjntolupstct5ursqiq - Windows

https://dev.azure.com/modatta

// docker - Linux
sudo snap install docker

// docker - Mac
brew install powershell

// docker - Windows
https://docs.docker.com/docker-for-windows/install/

// Powershell - linux
https://docs.microsoft.com/en-us/powershell/scripting/install/installing-powershell-core-on-linux?view=powershell-7
OR,
sudo snap install powershell --classic
OR,
sudo apt-get install -y powershell

// Install Az Module
Install-Module -Name Az -AllowClobber

// Powershell - mac
brew install powershell

// Powershell - Windows
https://github.com/PowerShell/PowerShell/releases

// azure-cli - Windows
https://docs.microsoft.com/en-us/cli/azure/install-azure-cli-windows?view=azure-cli-latest&tabs=azure-cli

// azure-cli - Mac
brew update && brew install azure-cli

// azure-cli - Linux
https://docs.microsoft.com/en-us/cli/azure/install-azure-cli-apt?view=azure-cli-latest

// Chcolatey - Windows
Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))


// kubectl
sudo apt-get update && sudo apt-get install -y apt-transport-https gnupg2
curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
echo "deb https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee -a /etc/apt/sources.list.d/kubernetes.list
sudo apt-get update
sudo apt-get install -y kubectl

// helm - Mac
brew install helm

// helm - Linux
sudo snap install helm
OR,
sudo apt-get install helm

// helm - windows
choco install kubernetes-helm

// Add Repo (must))
helm repo add stable https://kubernetes-charts.storage.googleapis.com/

// .NetCore
wget https://packages.microsoft.com/config/ubuntu/18.04/packages-microsoft-prod.deb -O packages-microsoft-prod.deb
sudo dpkg -i packages-microsoft-prod.deb
sudo add-apt-repository universe
sudo apt-get update
sudo apt-get install apt-transport-https
sudo apt-get update
sudo apt-get install dotnet-sdk-3.1

// windows nodepool
azureuser
PassW0rd@123

// AGIC
kubectl create -f https://raw.githubusercontent.com/Azure/aad-pod-identity/master/deploy/infra/deployment-rbac.yaml
helm repo add application-gateway-kubernetes-ingress https://appgwingress.blob.core.windows.net/ingress-azure-helm-package/
helm repo update
wget https://raw.githubusercontent.com/Azure/application-gateway-kubernetes-ingress/master/docs/examples/sample-helm-config.yaml -O helm-config.yaml
/*this will be part of the repo*/

helm install <install_name>> application-gateway-kubernetes-ingress/ingress-azure `
     --namespace <namespace> `
     --debug `
     --set appgw.name=<appgw-name> `
     --set appgw.resourceGroup=<resourceGroup> `
     --set appgw.subscriptionId=<subscriptionId> `
     --set appgw.usePrivateIP=false `
     --set appgw.shared=false `
     --set armAuth.type=servicePrincipal `
     --set armAuth.secretJSON=$(az ad sp create-for-rbac --sdk-auth | base64) `
     --set rbac.enabled=true `
     --set verbosityLevel=3 `
     --set kubernetes.watchNamespace=default

helm install aks-appgw-ingress -f ./Common/helm-config.yaml application-gateway-kubernetes-ingress/ingress-azure

// Uninstall AGIC
k delete -f https://raw.githubusercontent.com/Azure/aad-pod-identity/master/deploy/infra/deployment-rbac.yaml
helm delete aks-appgw-ingress -n aks-appgw-ingress-ns 

// NOT uSed finally for AGIC - **

$aadPodIdInstallCommand = "kubectl create -f https://raw.githubusercontent.com/Azure/aad-pod-identity/master/deploy/infra/deployment-rbac.yaml"
$helmRepoAddCommand = "helm repo add application-gateway-kubernetes-ingress https://appgwingress.blob.core.windows.net/ingress-azure-helm-package/"
$helmRepoUpdateCommand = "helm repo update"
$spCreateCommand = "az ad sp create-for-rbac --sdk-auth | base64 > sp.txt"
$spContentsCommand = "Get-Content sp.txt"
$appgwIngressRepoName = "application-gateway-kubernetes-ingress/ingress-azure"


# Prepare AGIC installer command
Invoke-Expression -Command $aadPodIdInstallCommand
Invoke-Expression -Command $helmRepoAddCommand
Invoke-Expression -Command $helmRepoUpdateCommand

# Install AGIC command
Invoke-Expression -Command $spCreateCommand
$spContent = Invoke-Expression -Command $spContentsCommand
helm install $ingControllerName $appgwIngressRepoName `
    --namespace $ingControllerNSName `
    --set appgw.name=$appgwName `
    --set appgw.resourceGroup=$resourceGroup `
    --set appgw.subscriptionId=$subscriptionId `
    --set appgw.usePrivateIP=false `
    --set appgw.shared=false `
    --set armAuth.type=servicePrincipal `
    --set armAuth.secretJSON=$spContent `
    --set rbac.enabled=true `
    --set verbosityLevel=3

// NOT uSed finally for AGIC - **
 
resourceGroup: aks-workshop-rg
clusterName: aks-workshop-cluster
acrName: akswkshpacr
keyVaultName: aks-workshop-kv
appgwName: aks-workshop-appgw
aksVNetName: aks-workshop-vnet
appgwSubnetName: aks-workshop-appgw-subnet
dockerSecretName: aks-workshop-secret
ingControllerName: aks-appgw-ingress
ingControllerNSName: aks-appgw-ingress-ns
appgwTemplateFileName: aksauto-appgw-deploy
subscriptionId: 6bdcc705-8db6-4029-953a-e749070e6db6
baseFolderPath: /Users/monojitdattams/Development/Projects/Workshops/AKSAutomate/Deployments

// Azure Ad details

# f9af19cf-2f73-4010-9b66-4ffcf8d6359c
# TPid=@X:2QADBvvDR.u3j3DdAksUaMv5
# b003b1d7-3a0f-4101-84bb-3d9d7a24b845
# 208c13e1-251b-4077-b5b8-12077e135bcb

//JFT
az aks create `
    --resource-group serverless-workshop-rg `
    --node-resource-group iot-aks-node-rg `
    --location eastus `
    --name iot-aks-cluster `
    --enable-addons=monitoring `
    --node-vm-size Standard_D2s_v3 `
    --node-count 3 `
    --kubernetes-version 1.15.7 `
    --generate-ssh-keys `
    --vm-set-type VirtualMachineScaleSets `
    --load-balancer-sku standard `
    --network-plugin azure


// nginx ingress

// public
helm repo add stable https://kubernetes-charts.storage.googleapis.com/
helm install nginx-ingress stable/nginx-ingress \
    --namespace nginx-ingress-ns \
    --set controller.replicaCount=2 \
    --set controller.nodeSelector."beta\.kubernetes\.io/os"=linux \
    --set defaultBackend.nodeSelector."beta\.kubernetes\.io/os"=linux

// private
helm install nginx-ingress stable/nginx-ingress \
    --namespace ingress-basic \
    -f internal-ingress.yaml \
    --set controller.replicaCount=2 \
    --set controller.nodeSelector."beta\.kubernetes\.io/os"=linux \
    --set defaultBackend.nodeSelector."beta\.kubernetes\.io/os"=linux

/subscriptions/6bdcc705-8db6-4029-953a-e749070e6db6/resourceGroups/aks-workshop-rg/providers/Microsoft.Network/virtualNetworks/aks-workshop-vnet/subnets/aks-workshop-subnet

// check network ports
netstat -ap tcp | grep -i "listen"
(sudo) lsof -PiTCP -sTCP:LISTEN

// CAT team machine
ssh dev@40.76.114.56